syntax = "proto3";
package mix;

option java_package = "com.swp.mix";
option java_outer_classname = "MixOuterClass";

service SimpleRelay
{
    // send a cell without onion-encryption (send before round start!)
    rpc Send(Cell) returns (SendAck);

    // poll cells (again without onion-encryption) based on tokens
    // -> poll at round end (round start + round_duration)
    // if no cells match, returns one dummy cell
    // attention: round numbers will be different compared to the real mix
    // implementation and should not be used
    rpc Receive(SimplePoll) returns (CellVector);

    // alternative to Send/Receive: long polling
    // call before round start and get response at round end
    // if this works without affecting power consumption (sleep states?),
    // this is the preferred way
    // attention: timeout/deadline at client has to be long enough
    // (round_duration + epsilon)
    // remark: send dummy cell at last round of epoch
    rpc SendAndLongPoll(LongPoll) returns (CellVector);
}

message Cell
{
    fixed64 circuit_id = 1;
    fixed32 round_no = 2;
    // onion encrypted part as specfied by Hydra, i.e.
    // 7B cmd, 1B args, 8B token, 240B payload
    // encoding:
    //      * the 8B (cmd, args) pair shall be encoded in one uint64 value,
    //        stored in little-endian order; currently, there is only one cmd,
    //        namely to delay the cell at a mix for args rounds  -> simply use
    //        uint64 values 0,...,255 and store them in little-endian order;
    //        note thas this leads to a different order compared to the
    //        paper, i.e. (args, cmd) instead of (cmd, args) but this is fine
    //        example: delay for 42 (decimal) rounds -> 0x2a00000000000000
    //      * the 8B token shall be encoded as uint64 in little-endian order
    //        use tokens < 2^63 for rendezvous tokens
    //        use tokens >= 2^63 for contact tokens
    bytes onion = 3;
}

message CellVector
{
    repeated Cell cells = 1;
}

message SendAck { }

message SimplePoll
{
    // use the same circuit id as for sending to avoid getting your own cells back
    fixed64 circuit_id = 1;
    // poll for all cells matching the specified tokens
    repeated fixed64 tokens = 2;
}

message TokenVector
{
    repeated fixed64 tokens = 1;
}

message LongPoll
{
    // send this cell
    Cell cell = 1;
    // receive cells with matching tokens in return
    repeated fixed64 tokens = 2;
}
