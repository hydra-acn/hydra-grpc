syntax = "proto3";
package mix;

option java_package = "com.android.mix";
option java_outer_classname = "MixOuterClass";

service Mix
{
    // setup a circuit
    // attention: may fail with "ALREADY_EXISTS" when the circuit_id is
    // already in use one the mix -> send again with new random circuit id
    rpc SetupCircuit(SetupPacket) returns (SetupAck);

    // streaming variant of circuit setup
    // TODO robustness: ignores duplicate circuit ids at the moment and stops
    // as soon as one bad setup packet is found
    rpc StreamSetupCircuit(stream SetupPacket) returns (SetupAck);

    // send an onion-encrypted cell and receive all new cells for the same
    // circuit in return (entry mix only)
    // for sending the cell of round r + 1, call this anytime between end of
    // round r and start of round r + 1 (see "round_duration" and
    // "round_waiting" from directory service)
    //
    // notes on the first round of an epoch:
    // * you have to send before the start of the communication phase (which also
    //   is the start of the first round)
    // * you will not receive a cell in return (not even a dummy) because it is
    //   the first round after all
    //
    // notes on the last round of an epoch:
    // * send a dummy cell as it will be dropped anyway
    // * you receive the cell from the second to last round in return
    // * use LatePoll to receive the NACK for the epoch
    rpc SendAndReceive(Cell) returns (CellVector);

    // poll for missed cells on circuits from past epochs (entry mix only)
    // the epoch NACK (last cell of an epoch) should be pulled this way
    // it has the following format in cell.onion (last cell in CellVector):
    //      * first byte encodes the number n of dropped cells
    //      * the remaining 7 bytes of (arg, cmd) are 0 (otherwise, the NACK is broken)
    //      * the remaining bytes (token, payload interpreted as one byte array)
    //        contain the n tokens of the dropped cells at the front, 8 bytes each
    //        (rest is garbage)
    rpc LatePoll(LatePollRequest) returns (CellVector);

    // if you use the same entry mix for epoch e and e + 1, you should use
    // this method to combine the late poll for the last round of epoch e and
    // sending for the first round of epoch e + 1 (it is more efficient
    // than separately calling LatePoll(...) and SendAndReceive(...);
    // in contrast to SendAndReceive(...) you will not receive cells for the new
    // epoch e + 1 as you are only supposed to use this method in the first round
    rpc SendAndLatePoll(SendAndLatePollRequest) returns (CellVector);

    // update (or add) the firebase token for a circuit
    rpc UpdateFirebaseToken(FirebaseUpdate) returns (FirebaseUpdateAck);
}

message SetupPacket
{
    uint32 epoch_no = 1;
    // circuit id must be random to minimize chance of collisions
    fixed64 circuit_id = 2;
    // client's public DH key for the current layer (56 bytes x448 OR 32 bytes x22519);
    // let the shared secret be s -> derive keys for symmetric ciphers using the
    // HKDF construction from RFC 5869 with SHA256 as hash function as follows:
    // (signature is hkdf(master_key: [uint8], salt: [uint8], info: uint8)
    // * 32 byte key for AES-256-GCM for the onion part: hkdf(s, nonce, 42)
    // * 128 byte key for Threefish in cells: hkdf(s, nonce, 43)
    bytes public_dh = 3;
    // nonce for AES-256-GCM (see onion), length must be 96 bit = 12 byte
    bytes nonce = 4;
    // authentication tag for AES-256-GCM (see onion), length must be 128 bit = 16 byte
    bytes auth_tag = 5;
    // onion encrypted part (AES-256-GCM) as specified by Hydra, i.e. recursive definition:
    // * base case: 256 tokens as further specified in the "Cell" message type;
    //   fill with dummy tokens and randomize order!
    // * recursive case:
    //      * 128 bit address information for next hop as one IPv6 address in
    //        big-endian (network) order; IPv4 addresses must be mapped as
    //        described here:
    //        http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding-2.htm
    //        example: 8.8.8.8 -> ::0xFFFF::8.8.8.8
    //      * 16 bit port information for next hop, little-endian order
    //      * 56 byte x448 OR 32 byte x25519 DH key for the next layer
    //      * 96 bit nonce for the next layer
    //      * 128 bit authentication tag for the next layer
    //      * next layer -> recurse
    // note: length of the onion field must be
    //        256 * 8 byte + (l - 1) * 102 byte, with l = path length
    // when sending to the entry mix
    bytes onion = 6;
}

message SetupAck { }

message Cell
{
    fixed64 circuit_id = 1;
    fixed32 round_no = 2;
    // onion encrypted part as specfied by Hydra, i.e.
    // 7B cmd, 1B args, 8B token, 240B payload
    // encoding:
    //      * the 8B (cmd, args) pair shall be encoded in one uint64 value,
    //        stored in little-endian order; currently, there is only one cmd,
    //        namely to delay the cell at a mix for args rounds  -> simply use
    //        uint64 values 0,...,255 and store them in little-endian order;
    //        note thas this leads to a different order compared to the
    //        paper, i.e. (args, cmd) instead of (cmd, args) but this is fine
    //        example: delay for 42 (decimal) rounds -> 0x2a00000000000000
    //      * the 8B token shall be encoded as uint64 in little-endian order
    //        use tokens < 2^63 for rendezvous tokens
    //        use tokens >= 2^63 for contact tokens
    bytes onion = 3;
}

message LatePollRequest
{
    // poll for any cells received on the specified circuits
    repeated fixed64 circuit_ids = 1;
}

message SendAndLatePollRequest
{
    Cell cell = 1;
    repeated fixed64 circuit_ids = 2;
}

message CellVector
{
    repeated Cell cells = 1;
}

message FirebaseUpdate
{
    fixed32 epoch_no = 1;
    fixed64 circuit_id = 2;
    string token = 3;
}

message FirebaseUpdateAck { }
