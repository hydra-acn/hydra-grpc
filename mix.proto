syntax = "proto3";
package mix;

option java_package = "com.swp.mix";
option java_outer_classname = "MixOuterClass";

service SimpleRelay
{
    // send a cell without onion-encryption and receive cells based on the
    // specified tokens in return
    // call this anytime between end of round r and start of round r+1
    // (see "round_duration" and "round_waiting" from directory service)
    rpc SendAndReceive(RelayRequest) returns (CellVector);
}

message Cell
{
    fixed64 circuit_id = 1;
    fixed32 round_no = 2;
    // onion encrypted part as specfied by Hydra, i.e.
    // 7B cmd, 1B args, 8B token, 240B payload
    // encoding:
    //      * the 8B (cmd, args) pair shall be encoded in one uint64 value,
    //        stored in little-endian order; currently, there is only one cmd,
    //        namely to delay the cell at a mix for args rounds  -> simply use
    //        uint64 values 0,...,255 and store them in little-endian order;
    //        note thas this leads to a different order compared to the
    //        paper, i.e. (args, cmd) instead of (cmd, args) but this is fine
    //        example: delay for 42 (decimal) rounds -> 0x2a00000000000000
    //      * the 8B token shall be encoded as uint64 in little-endian order
    //        use tokens < 2^63 for rendezvous tokens
    //        use tokens >= 2^63 for contact tokens
    bytes onion = 3;
}

message RelayRequest
{
    // send this cell (dummy if you have no real cell to send)
    // for the simple relay, each client should use a unique circuit id and
    // stick to it to avoid getting its own cells back
    Cell cell = 1;
    // receive cells with matching tokens in return
    repeated fixed64 tokens = 2;
}

message CellVector
{
    repeated Cell cells = 1;
}
