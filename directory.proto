syntax = "proto3";
package directory;

service Directory
{
    // used by mixes to register themselves for the first time,
    // includes a key exchange for authentication of updates
    rpc Register(RegisterRequest) returns (RegisterReply);

    // push new ephemeral DH public key (mix) to the directory service
    rpc AddStaticDh(DhMessage) returns (DhReply);

    // query the directory service
    rpc QueryDirectory(DirectoryRequest) returns (DirectoryReply);
}

message RegisterRequest
{
    // fingerprint is a hash of public_dh and used for identification of further requests
    string fingerprint = 1;
    string address = 2;
    uint32 port = 3;
    // for key exchange mix <-> directory service
    bytes public_dh = 4;
}

message RegisterReply
{
    // for key exchange mix <-> directory service
    bytes public_dh = 1;
}

message DhMessage
{
    string fingerprint = 1;
    uint32 counter = 2;
    bytes public_dh = 3;
    bytes auth_tag = 4;
}

message DhReply
{
    uint32 counter = 1;
    uint32 epoch_no = 2;
}

message DirectoryRequest
{
    // only query directory starting with the given epoch number
    uint32 min_epoch_no = 1;
}

message DirectoryReply
{
    // epoch infos are sorted (ascending) by epoch number
    repeated EpochInfo epochs = 1;
}

// absolute times are given in Unix/POSIX time, relative times are given in seconds
message EpochInfo
{
    uint32 epoch_no = 1;
    uint32 path_length = 2;

    uint64 setup_start_time = 3;

    uint64 communication_start_time = 4;
    // attention: last round in each epoch is reserved for receiving only!
    uint32 number_of_rounds = 5;
    // time between send and receive (theoretical time) for one round
    // attention: receive is additionally delayed by transmission and propagation delay between entry mix and client
    uint32 round_duration = 6;
    // time between two rounds, i.e. between receive (theoretical time) and next send
    uint32 round_waiting = 7;

    // the actual directory
    repeated MixInfo mixes = 8;
}

message MixInfo
{
    string address = 1;
    uint32 port = 2;
    bytes public_dh = 3;
}


