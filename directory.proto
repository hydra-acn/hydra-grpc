syntax = "proto3";
package directory;

option java_package = "com.swp.directory";

service Directory
{
    // used by mixes to register themselves for the first time,
    // includes a key exchange for authentication of updates
    rpc Register(RegisterRequest) returns (RegisterReply);

    // unregister to signal that a mix is no longer available
    rpc Unregister(UnregisterRequest) returns (UnregisterAck);

    // push new ephemeral DH public key (mix) to the directory service
    rpc AddStaticDh(DhMessage) returns (DhReply);

    // query the directory service
    rpc QueryDirectory(DirectoryRequest) returns (DirectoryReply);
}

message RegisterRequest
{
    // fingerprint is a hash of public_dh and used for identification of further requests
    // TODO it should be a hash of public_dh, atm its an arbitrary string
    string fingerprint = 1;
    // address in big endian (network) order; v4 and v6 supported
    bytes address = 2;
    // remark: protobuf does not support uint16 ...
    uint32 entry_port = 3;
    uint32 relay_port = 4;
    // for key exchange mix <-> directory service
    bytes public_dh = 5;
}

message RegisterReply
{
    // for key exchange mix <-> directory service
    bytes public_dh = 1;
}

message UnregisterRequest
{
    string fingerprint = 1;
    bytes auth_tag = 2;
}

message UnregisterAck { };

message DhMessage
{
    string fingerprint = 1;
    uint32 counter = 2;
    bytes public_dh = 3;
    bytes auth_tag = 4;
}

message DhReply
{
    uint32 counter = 1;
    uint32 epoch_no = 2;
}

message DirectoryRequest
{
    // only query directory starting with the given epoch number
    uint32 min_epoch_no = 1;
}

message DirectoryReply
{
    // epoch infos are sorted (ascending) by epoch number
    repeated EpochInfo epochs = 1;
}

// absolute times are given in Unix/POSIX time, relative times are given in seconds
message EpochInfo
{
    uint32 epoch_no = 1;
    uint32 path_length = 2;

    uint64 setup_start_time = 3;

    uint64 communication_start_time = 4;
    // attention: last round in each epoch is reserved for receiving only!
    uint32 number_of_rounds = 5;
    // round duration -> time between send and receive for one round
    // the client should poll for new messages at this time point
    uint32 round_duration = 6;
    // time between two rounds, i.e. between receive (poll time) and next send
    uint32 round_waiting = 7;

    // the actual directory
    repeated MixInfo mixes = 8;
}

message MixInfo
{
    // address in big endian (network) order; v4 and v6 supported
    bytes address = 1;
    // remark: protobuf does not support uint16 ...
    // use entry_port to contact your entry mix
    uint32 entry_port = 2;
    // use relay_port when specifying next hop in setup packets
    uint32 relay_port = 3;
    bytes public_dh = 4;
    // not really necessary, mainly useful for concise implementation of
    // unregister at the directory and for debugging
    string fingerprint = 5;
}
